import { Factory, StylesApiProps } from '@mantine/core/lib/core';
import { __PopoverProps, PopoverStylesNames } from '@mantine/core/lib/components/Popover';
export type MenuStylesNames = 'item' | 'itemLabel' | 'itemSection' | 'label' | 'divider' | PopoverStylesNames;
export type MenuFactory = Factory<{
    props: MenuProps;
    ref: HTMLDivElement;
    stylesNames: MenuStylesNames;
}>;
export interface MenuProps extends __PopoverProps, StylesApiProps<MenuFactory> {
    variant?: string;
    /** Menu content */
    children?: React.ReactNode;
    /** Controlled menu opened state */
    opened?: boolean;
    /** Uncontrolled menu initial opened state */
    defaultOpened?: boolean;
    /** Determines whether dropdown should trap focus of keyboard events */
    trapFocus?: boolean;
    /** Called when menu opened state changes */
    onChange?: (opened: boolean) => void;
    /** Called when Menu is opened */
    onOpen?: () => void;
    /** Called when Menu is closed */
    onClose?: () => void;
    /** Determines whether Menu should be closed when item is clicked */
    closeOnItemClick?: boolean;
    /** Determines whether arrow key presses should loop though items (first to last and last to first) */
    loop?: boolean;
    /** Determines whether dropdown should be closed when Escape key is pressed */
    closeOnEscape?: boolean;
    /** Event which should open menu */
    trigger?: 'click' | 'hover' | 'click-hover';
    /** Open delay in ms, applicable only to trigger="hover" variant */
    openDelay?: number;
    /** Close delay in ms, applicable only to trigger="hover" variant */
    closeDelay?: number;
    /** Determines whether dropdown should be closed on outside clicks */
    closeOnClickOutside?: boolean;
    /** Events that trigger outside clicks */
    clickOutsideEvents?: string[];
    /** id base to create accessibility connections */
    id?: string;
    /** Set the `tabindex` on all menu items. Defaults to -1 */
    menuItemTabIndex?: -1 | 0;
}
export declare function Menu(_props: MenuProps): import("react/jsx-runtime").JSX.Element;
export declare namespace Menu {
    var extend: (input: import("@mantine/core/lib/core/factory/factory").ExtendsRootComponent<{
        props: MenuProps;
        ref: HTMLDivElement;
        stylesNames: MenuStylesNames;
    }>) => import("@mantine/core/lib/core/factory/factory").ExtendsRootComponent<{
        props: MenuProps;
        ref: HTMLDivElement;
        stylesNames: MenuStylesNames;
    }>;
    var classes: Record<string, string>;
    var displayName: string;
    var Item: (<C = "button">(props: import("@mantine/core/lib/core").PolymorphicComponentProps<C, import("@mantine/core/lib/components/Menu/MenuItem/MenuItem").MenuItemProps>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>) & Omit<import("react").FunctionComponent<(import("@mantine/core/lib/components/Menu/MenuItem/MenuItem").MenuItemProps & {
        component?: any;
    } & Omit<Omit<any, "ref">, "component" | keyof import("@mantine/core/lib/components/Menu/MenuItem/MenuItem").MenuItemProps> & {
        ref?: any;
        renderRoot?: ((props: any) => any) | undefined;
    }) | (import("@mantine/core/lib/components/Menu/MenuItem/MenuItem").MenuItemProps & {
        component: import("react").ElementType<any, keyof import("react").JSX.IntrinsicElements>;
        renderRoot?: ((props: Record<string, any>) => any) | undefined;
    })>, never> & import("@mantine/core/lib/core/factory/factory").ThemeExtend<{
        props: import("@mantine/core/lib/components/Menu/MenuItem/MenuItem").MenuItemProps;
        defaultRef: HTMLButtonElement;
        defaultComponent: "button";
        stylesNames: import("@mantine/core/lib/components/Menu/MenuItem/MenuItem").MenuItemStylesNames;
        compound: true;
    }> & import("@mantine/core/lib/core/factory/factory").ComponentClasses<{
        props: import("@mantine/core/lib/components/Menu/MenuItem/MenuItem").MenuItemProps;
        defaultRef: HTMLButtonElement;
        defaultComponent: "button";
        stylesNames: import("@mantine/core/lib/components/Menu/MenuItem/MenuItem").MenuItemStylesNames;
        compound: true;
    }> & import("@mantine/core/lib/core/factory/polymorphic-factory").PolymorphicComponentWithProps<{
        props: import("@mantine/core/lib/components/Menu/MenuItem/MenuItem").MenuItemProps;
        defaultRef: HTMLButtonElement;
        defaultComponent: "button";
        stylesNames: import("@mantine/core/lib/components/Menu/MenuItem/MenuItem").MenuItemStylesNames;
        compound: true;
    }> & Record<string, never>;
    var Label: import("@mantine/core/lib/core").MantineComponent<{
        props: import("@mantine/core/lib/components/Menu/MenuLabel/MenuLabel").MenuLabelProps;
        ref: HTMLDivElement;
        stylesNames: "label";
        compound: true;
    }>;
    var Dropdown: import("@mantine/core/lib/core").MantineComponent<{
        props: import("@mantine/core/lib/components/Menu/MenuDropdown/MenuDropdown").MenuDropdownProps;
        ref: HTMLDivElement;
        stylesNames: "dropdown";
        compound: true;
    }>;
    var Target: import("react").ForwardRefExoticComponent<import("@mantine/core/lib/components/Menu/MenuTarget/MenuTarget").MenuTargetProps & import("react").RefAttributes<HTMLElement>>;
    var Divider: import("@mantine/core/lib/core").MantineComponent<{
        props: import("@mantine/core/lib/components/Menu/MenuDivider/MenuDivider").MenuDividerProps;
        ref: HTMLDivElement;
        stylesNames: "divider";
        compound: true;
    }>;
}
